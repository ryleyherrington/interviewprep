#!/usr/bin/python

import sys
import math
import re

def usage():
	print "euler.py [number from 1-59]"

def euler1():
	print """Problem:\nIf we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000. """	
	print "\nAnswer:\n"+str(sum([i for i in range(1000) if i%3==0 or i%5==0]))

def euler2():
	print """Problem:\nEach new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.""" 
	f = 1
	s = 2
	total = 2
	curr = 0
	#print str(f)
	#print str(s)
	while curr < 4000000:
		curr = f + s
		#print str(curr)
		if curr%2==0:
			total = total+curr 
		f = s
		s = curr
	print "Answer:\n" + str(total)

def euler3():
	print """Problem:\nThe prime factors of 13195 are 5, 7, 13 and 29.  What is the largest prime factor of the number 600851475143 ?  """ 

	n =	600851475143 
	d = 2	
	while d*d<n:
		while n%d == 0:
			n = n/d
		d = d+1
	
	print "Answer:\n" + str(n)
		
def euler4():
	print """Problem:\nA palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 x 99.

Find the largest palindrome made from the product of two 3-digit numbers."""
	fac1 =0
	fac2 = 0
	m = 0 
	for i in range(1000):
		for j in range(1000):
			curr = i*j	
			cstr = str(curr)
			pal = ''.join(reversed(cstr))
			length = len(cstr)
			if length>3:
				if (pal==cstr)and curr>m:#also could be if cstr==cstr[::-1] 
					m = curr
					fac1 = i
					fac2 = j

	print "Answer:\n"+str(m) + "\nfac1:"+str(fac1)+"\nfac2:"+str(fac2)

def main(argc, args):
	if argc > 1:
		if args[1] == "1":
			euler1()
		if args[1] == "2":
			euler2()
		if args[1] == "3":
			euler3()
		if args[1] == "4":
			euler4()
	if argc <2:
		usage()

if __name__ == '__main__':
    sys.exit(main(len(sys.argv), sys.argv))

